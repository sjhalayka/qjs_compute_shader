#version 430 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) writeonly uniform image2D output_image;
layout(binding = 1, rgba32f) readonly uniform image2D input_image;

uniform vec4 C;
uniform int max_iterations;
uniform float threshold;

vec4 qmul(vec4 qa, vec4 qb)
{
   vec4 qout;
   qout.x = qa.x*qb.x - dot(qa.yzw, qb.yzw);
   qout.yzw = qa.x*qb.yzw + qb.x*qa.yzw + cross(qa.yzw, qb.yzw);

   return qout;
}

float iterate(vec4 z)
{
    float threshold_sq = threshold*threshold;

    float magnitude_sq = dot(z, z);

    for(int i = 0; i < max_iterations; i++)
    {
        z = qmul(z, z) + C;

        if((magnitude_sq = dot(z, z)) >= threshold_sq)
            break;
    }

    return sqrt(magnitude_sq);
}

void main()
{
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	vec4 z = imageLoad(input_image, pixel_coords);

	float magnitude = iterate(z);	

	vec4 output_pixel = vec4(magnitude, 0, 0, 0);

	imageStore(output_image, pixel_coords, output_pixel);
}
